class DynamicTable:
    def __init__(self, capacity=1):
        self.table = [0] * capacity
        self.size = 0
        self.capacity = capacity
    def add(self, element):
        if self.size == self.capacity:
#Double the capacity of the table if it is full
            new_table = [0] * (self.capacity * 2)
            for i in range(self.size):
                new_table[i] = self.table[i]
            self.table = new_table
            self.capacity *= 2
        self.table[self.size] = element
        self.size += 1
       
    def size(self):
        return self.size
    def capacity(self):
        return self.capacity
def potential(table):
    return 2*table.size - table.capacity
def cost(table, operation):
#Calculate the amortized cost of the operation
    if operation == "add":
       
        if table.size == table.capacity:

#Double the table
            return potential(table) + 1
        else:
            return 1
    else:
        raise Exception("Invalid operation")
       
table = DynamicTable()
total_cost = 0
operation_cost = 1
operation_cos = 1
prev = 0
print("Item No.\tTable Size\tPotential\tOperation Cost\tTotal Cost\tAmortized Cost")
for i in range(1, 11):
    operation_cost = cost(table, "add")
    total_cost += operation_cost
    table.add(i)
#print("=" * 8)
    pot = potential(table)
    amortized_cost = operation_cost + (pot - prev)
    prev = pot
#print(amortized_cost)
    print(f"{i}\t\t {table.capacity}\t\t {potential(table)}\t\t{operation_cos}\t\t {operation_cost}\t\t {amortized_cost}")



//////////////////////////

push = 1
pop = 1
s=[]
a=[5,7,8,9,2,6,7,3,8]
# a=[1,2,3,4,5,6,7,8]
totalCost=0
print("Element","Cost","Stack")
def potential():
    global totalCost
    for i in range(len(a)):
        if a[i]<len(s):
            multipop(a[i],i)
        old_s_len=len(s)
        s.append(a[i])
        new_s_len=len(s)
        cost = push + new_s_len - old_s_len
        totalCost+=cost
        print(a[i],"     ",cost,"  ",s[::-1])
        
def multipop(k,l):
    global totalCost
    old_s_len=len(s)
    for i in range(k):
        s.pop(-1)
    new_s_len = len(s)
    cost = pop*k + new_s_len - old_s_len
    totalCost+=cost
    print(a[l],"     ",cost,"  ",s[::-1])
potential() 
print("Total Cost",totalCost)
