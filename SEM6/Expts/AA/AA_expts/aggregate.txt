def aggregate_dynamic(n):
    size=1
    icost=0
    dcost=0
    total_cost=0
    amortized_cost=0
    
    print("Element\tDoubling cost\tInsertion Cost\tTotal cost")
    for i in range(1,n+1):
        icost=1
        if i>size:
            size=size*2
            dcost = i-1
        total_cost = dcost+icost
        amortized_cost=amortized_cost+total_cost
        print(i,"\t\t",dcost,"\t\t",icost,"\t\t",total_cost," ")
        icost=0
        dcost=0
    return amortized_cost/n

n = int(input("Enter the number of elements: "))
print("Aggregate method using dynamic tables: ")
a = aggregate_dynamic(n)
print("Amortized cost: ",a)


///////////////////////////////
class AggregateStack:
    def __init__(self):
        self.stack=[]
        self.cost=0
    def push(self,item):
        self.stack.append(item)
        self.cost+=1
        self.printstack()
    def pop(self):
        self.stack.pop()
        self.cost+=1
        self.printstack()
    def multipop(self,k):
        for i in range(k):
            self.pop()
    def printstack(self):
        print(self.stack,"\n")
s=AggregateStack()
s.push(10)
s.push(20)
s.push(30)
s.push(40)
s.pop()
s.multipop(2)    
print("Amortized cost= ",s.cost/7)