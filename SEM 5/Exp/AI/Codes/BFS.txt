vertex = {}
def make_graph():

    vertices = set()
    print("")
    while True:
        x = input("Enter edge: ")

        if x == "END":
            for y in vertices:
                if y not in vertex.keys():
                    vertex[y] = []
            print("\nGraph:", vertex)
            return

        a = int(x.split(" ")[0])
        b = int(x.split(" ")[1])

        vertices.add(a)
        vertices.add(b)

        if a in vertex.keys():
            vertex[a].append(b)
        else:
            vertex[a] = [b]


def BFS():

    start = int(input("\nEnter start node: "))
    target = int(input("Enter target node: "))

    path = []
    queue = [start]
    visited = set()

    print("\nExecution:")

    while len(queue) != 0:
        curr_node = queue.pop(0)

        if curr_node not in visited:

            visited.add(curr_node)
            path.append(curr_node)

            if curr_node == target:
                print("\nFound target: ", target)
                print("\nPath: ", end="")
                [print(str(x) + " -> ", end="") for x in path[:-1]]
                print(target)
                return path

            for node in vertex[curr_node]:
                if node not in visited:
                    queue.append(node)

        print(
            "Current Node:",
            curr_node,
            "\tQueue:",
            queue,
            "\t" if len(queue) < 3 else "",
            "\tPath:",
            path,
        )

    print("\nTarget not found")


if __name__ == "__main__":
    make_graph()
    BFS()

#       1
#     /   \
#    3      5
#   / \    / \
#  2   4   7  9

# Input:
# 1 3
# 1 5
# 3 2
# 3 4
# 5 7
# 5 9
# END
# 1
# 4
